{"version":3,"sources":["axios.js","components/Login.js","components/Header.js","context/AppReducer.js","context/GlobalState.js","functions/handleDate.js","components/Balance.js","components/CoinsCrops.js","components/SaveAsJson.js","components/AddBalance.js","components/AddCrops.js","components/EachBalance.js","components/BalancesList.js","components/EachCrops.js","components/CropsList.js","components/Dashboard.js","App.js","components/useToken.js","index.js"],"names":["client","axios","create","baseURL","loginUser","credentials","a","config","headers","post","response","data","console","log","Login","setToken","useState","username","password","handleSubmit","e","preventDefault","token","className","onSubmit","htmlFor","type","name","id","Header","AppReducer","state","action","balanceLoading","dailyBalance","payload","error","cropsLoading","cropsHarvested","filter","b","_id","c","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","getBalance","get","bal","getCrops","cr","deleteBalance","delete","addBalance","balance","deleteCrops","addCrops","crops","Provider","value","handleDate","dt","parsedDate","Date","getDate","getMonth","getFullYear","findDt","createdAt","arrDate","split","parse","findLastEntries","allDates","map","d","lastDay","Math","max","Balance","useContext","usdPrice","setUsdPrice","brlPrice","setBrlPrice","btcPrice","setBtcPrice","loading","setLoading","useEffect","lastBal","symbolArr","symbol","toLowerCase","rawId","coinList","coin","includes","dict","forEach","ids","join","simplePriceUrl","fetch","then","json","usd","brl","bitcoin","btc","totalUsd","totalBrl","totalBtc","amount","toFixed","CoinsCrops","cropsArray","setCropsArray","balArray","setBalArray","lastCr","balConsolidated","cropsConsolidated","hasOwnProperty","tempCropsArray","record","push","key","uuidv4","tempBalArray","SaveAsJson","text","filename","jsonData","href","encodeURIComponent","JSON","stringify","download","AddBalance","setSymbol","setAmount","description","setDescription","onChange","target","placeholder","step","AddCrops","EachBalance","onClick","BalancesList","EachCrops","CropsList","Dashboard","App","tokenString","localStorage","getItem","userToken","getToken","setItem","useToken","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13d57945.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst client = axios.create({\n    baseURL: '/api/v1' // 'http://localhost:5000/api/v1/'\n})\n\nexport default client","import React, { useState } from 'react'\nimport client from '../axios'\n\nconst loginUser = async (credentials) => {\n    try {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const response = await client.post('login', credentials, config)\n        return response.data\n\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const Login = ({ setToken }) => {\n    const [username, setUsername] = useState()\n    const [password, setPassword] = useState()\n\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n        const token = await loginUser({\n            username,\n            password\n        })\n        setToken(token)\n    }\n\n    return (\n        <div className='login'>\n            <h1>Please Log In</h1>\n            <form onSubmit={handleSubmit}>\n                <label className='login__form__label' htmlFor='username'>\n                    Username\n                </label>\n                <input className='login__form__input' type=\"text\" name=\"username\" id=\"username\" />\n                <label className='login__form__label' htmlFor=\"password\">\n                    Password\n                </label>\n                <input className='login__form__input' type=\"password\" name=\"password\" id=\"password\" />\n                <div>\n                    <button className='login__form__button' type=\"submit\">Submit</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const Header = () => {\n    return (\n        <h2>\n            Crypto Observer\n        </h2>\n    )\n}\n","export const AppReducer = (state, action) => {\n    switch (action.type) {\n        case 'GET_BALANCE':\n            return {\n                ...state,\n                balanceLoading: false,\n                dailyBalance: action.payload\n            }\n        case 'BALANCE_ERROR':\n            return {\n                ...state,\n                error: action.payload\n            }\n        case 'GET_CROPS':\n            return {\n                ...state,\n                cropsLoading: false,\n                cropsHarvested: action.payload\n            }\n        case 'CROPS_ERROR':\n            return {\n                ...state,\n                error: action.payload\n            }\n        case 'DELETE_BALANCE':\n            return {\n                ...state,\n                dailyBalance: state.dailyBalance.filter(b => b._id !== action.payload)\n            }\n        case 'ADD_BALANCE':\n            return {\n                ...state,\n                dailyBalance: [...state.dailyBalance, action.payload]\n            }\n        case 'DELETE_CROPS':\n            return {\n                ...state,\n                cropsHarvested: state.cropsHarvested.filter(c => c._id !== action.payload)\n            }\n        case 'ADD_CROPS':\n            return {\n                ...state,\n                cropsHarvested: [...state.cropsHarvested, action.payload]\n            }\n        default:\n            return state\n    }\n}","import React, { createContext, useReducer } from 'react'\n// import { dailyBalance } from '../data/dailyBalance'\n// import { cropsHarvested } from '../data/cropsHarvested'\nimport { AppReducer } from './AppReducer'\nimport client from '../axios'\n\n// import cropsHarvested from '../data/cropsHarvested.json'\n// import dailyBalance from '../data/dailyBalance.json'\n\n// initial state\nconst initialState = {\n    dailyBalance: [],\n    cropsHarvested: [],\n    error: null,\n    balanceLoading: true,\n    cropsLoading: true\n}\n\n// create context\nexport const GlobalContext = createContext(initialState)\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState)\n\n    /*useEffect(() => {\n        localStorage.setItem('crypto_observer_state', JSON.stringify(state))\n    }, [state])*/\n\n    // actions\n    const getBalance = async () => {\n        try {\n            const bal = await client.get('balance')\n            dispatch({\n                type: 'GET_BALANCE',\n                payload: bal.data.data\n            })\n        } catch (error) {\n            dispatch({\n                type: 'BALANCE_ERROR',\n                payload: error //.response.data.error\n            })\n        }\n    }\n\n    const getCrops = async () => {\n        try {\n            const cr = await client.get('crops')\n\n            dispatch({\n                type: 'GET_CROPS',\n                payload: cr.data.data\n            })\n        } catch (error) {\n            dispatch({\n                type: 'CROPS_ERROR',\n                payload: error //.response.data.error\n            })\n        }\n    }\n\n    const deleteBalance = async (id) => {\n        try {\n            await client.delete(`balance/${id}`)\n\n            dispatch({\n                type: 'DELETE_BALANCE',\n                payload: id\n            })\n        } catch (error) {\n            dispatch({\n                type: 'BALANCE_ERROR',\n                payload: error //.response.data.error\n            })\n        }\n\n    }\n\n    const addBalance = async (balance) => {\n        try {\n            const response = await client.post('balance', {\n                ...balance\n            })\n            dispatch({\n                type: 'ADD_BALANCE',\n                payload: response.data.data\n            })\n        } catch (error) {\n            dispatch({\n                type: 'BALANCE_ERROR',\n                payload: error //.response.data.error\n            })\n        }\n    }\n\n    const deleteCrops = async (id) => {\n        try {\n            await client.delete(`crops/${id}`)\n\n            dispatch({\n                type: 'DELETE_CROPS',\n                payload: id\n            })\n        } catch (error) {\n            dispatch({\n                type: 'CROPS_ERROR',\n                payload: error //.response.data.error\n            })\n        }\n    }\n\n    const addCrops = async (crops) => {\n        try {\n            const response = await client.post('crops', {\n                ...crops\n            })\n\n            dispatch({\n                type: 'ADD_CROPS',\n                payload: response.data.data\n            })\n        } catch (error) {\n            dispatch({\n                type: 'CROPS_ERROR',\n                payload: error //.response.data.error\n            })\n        }\n    }\n\n    return (\n        <GlobalContext.Provider\n            value={{\n                dailyBalance: state.dailyBalance,\n                cropsHarvested: state.cropsHarvested,\n                error: state.error,\n                balanceLoading: state.balanceLoading,\n                cropsLoading: state.cropsLoading,\n                getBalance,\n                deleteBalance,\n                addBalance,\n                getCrops,\n                deleteCrops,\n                addCrops\n            }}\n        >\n            {children}\n        </GlobalContext.Provider>\n    )\n}","export const handleDate = (dt) => {\n    const parsedDate = new Date(dt)\n    const day = parsedDate.getDate()\n    const month = parsedDate.getMonth() + 1\n    const year = parsedDate.getFullYear()\n    const response = day + '/' + month + '/' + year\n    return response\n}\n\nexport const getDefaultTodayDate = () => {\n    const now = new Date()\n    const year = now.getFullYear()\n    const month = now.getMonth() + 1\n    const day = now.getDate()\n    const today = Date.parse(`${year}/${month}/${day}`)\n    return today\n}\n\nexport const findDt = (createdAt) => {\n    const parsedDate = handleDate(createdAt)\n    const arrDate = parsedDate.split('/')\n    const finalDate = Date.parse(`${arrDate[2]}-${arrDate[1]}-${arrDate[0]}`)\n    return finalDate\n}\n\nexport const findLastEntries = (data) => {\n    const allDates = data.map(d => findDt(d.createdAt))\n    const lastDay = Math.max(...allDates)\n    const lastEntries = data.filter(e => findDt(e.createdAt) === lastDay)\n    return lastEntries\n}\n\n// const day = 86400000 // milliseconds\n","import React, { useContext, useEffect, useState } from 'react'\nimport coinList from '../data/coinList.json' // from coingecko\n\nimport { GlobalContext } from '../context/GlobalState'\nimport { findLastEntries } from '../functions/handleDate'\n\n// https://www.coingecko.com/pt/api/documentation\n// const coinListUrl = 'https://api.coingecko.com/api/v3/coins/list'\n// const coinData = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=300&page=1&sparkline=false&price_change_percentage=1h%2C24h%2C7d%2C14d%2C30d%2C200d%2C1y'\n\nexport const Balance = () => {\n    const { dailyBalance } = useContext(GlobalContext)\n    const [usdPrice, setUsdPrice] = useState(0)\n    const [brlPrice, setBrlPrice] = useState(0)\n    const [btcPrice, setBtcPrice] = useState(0)\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        const lastBal = findLastEntries(dailyBalance)\n        const symbolArr = lastBal.map(bal => bal.symbol.toLowerCase())\n\n        const rawId = coinList\n            .filter(coin => symbolArr\n                .includes(coin.symbol) && !coin.id.includes('-') && coin.symbol !== 'BTC')\n\n        const dict = {}\n        rawId.forEach(e => {\n            dict[e.symbol] = e.id\n        })\n        dict['usd'] = 'dolar'\n\n        const ids = rawId.map(e => e.id).join()\n        const simplePriceUrl = `https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,${ids}&vs_currencies=usd,brl,btc`\n        fetch(simplePriceUrl)\n            .then(response => response.json())\n            .then(json => {\n\n                json['dolar'] = {\n                    usd: 1,\n                    brl: json.bitcoin.brl / json.bitcoin.usd,\n                    btc: 1 / json.bitcoin.usd\n                }\n                let totalUsd = 0\n                let totalBrl = 0\n                let totalBtc = 0\n                lastBal.forEach(e => {\n                    totalUsd += e.amount * json[dict[e.symbol.toLowerCase()]].usd\n                    totalBrl += e.amount * json[dict[e.symbol.toLowerCase()]].brl\n                    totalBtc += e.amount * json[dict[e.symbol.toLowerCase()]].btc\n                })\n                setUsdPrice(totalUsd)\n                setBrlPrice(totalBrl)\n                setBtcPrice(totalBtc)\n            })\n\n        setLoading(false)\n    }, [dailyBalance])\n\n\n    if (loading) {\n        return <h1>Loading...</h1>\n    }\n\n    return (\n        <div className='balance'>\n            <h4 className='balance__title'>Latest Balance</h4>\n            <h1 className=\"balance__text\">USD <span>{usdPrice.toFixed(2)}</span></h1>\n            <h1 className=\"balance__text\">BRL <span>{brlPrice.toFixed(2)}</span></h1>\n            <h1 className=\"balance__text\">BTC <span>{btcPrice.toFixed(2)}</span></h1>\n        </div>\n    )\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { findLastEntries } from '../functions/handleDate'\n\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const CoinsCrops = () => {\n    const { dailyBalance, cropsHarvested } = useContext(GlobalContext)\n    const [cropsArray, setCropsArray] = useState({})\n    const [balArray, setBalArray] = useState({})\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        const lastBal = findLastEntries(dailyBalance)\n        const lastCr = findLastEntries(cropsHarvested)\n        const balConsolidated = {}\n        const cropsConsolidated = {}\n\n        lastBal.forEach(c => {\n            if (!balConsolidated.hasOwnProperty(c.symbol)) {\n                balConsolidated[c.symbol] = 0\n            }\n            balConsolidated[c.symbol] += c.amount\n        });\n\n        lastCr.forEach(c => {\n            if (!cropsConsolidated.hasOwnProperty(c.symbol)) {\n                cropsConsolidated[c.symbol] = 0\n            }\n            cropsConsolidated[c.symbol] += c.amount\n        });\n\n        const tempCropsArray = []\n        for (const record in cropsConsolidated) {\n            if (record) {\n                tempCropsArray.push({ key: uuidv4(), symbol: record, amount: cropsConsolidated[record] })\n            }\n        }\n        setCropsArray(tempCropsArray)\n\n        const tempBalArray = []\n        for (const record in balConsolidated) {\n            if (record) {\n                tempBalArray.push({ key: uuidv4(), symbol: record, amount: balConsolidated[record] })\n            }\n        }\n        setBalArray(tempBalArray)\n        setLoading(false)\n    }, [dailyBalance, cropsHarvested])\n\n    if (loading) {\n        return <h1>Loading...</h1>\n    }\n\n    return (\n        <div className='coinscrops'>\n            <div className='coinscrops__section coinscrops__section__left'>\n                <h4 className='coinscrops__title'>Coins</h4>\n                <ul className='coinscrops__list'>\n                    {\n                        balArray.map(bal => (\n                            <li\n                                className=\"coinscrops__text\"\n                                key={bal.key}\n                            >\n                                <span>{bal.symbol}</span>\n                                <span>{bal.amount.toFixed(2)}</span>\n                            </li>\n                        ))\n                    }\n                </ul>\n            </div>\n            <div className='coinscrops__section'>\n                <h4 className='coinscrops__title'>Crops</h4>\n                <ul className='coinscrops__list'>\n                    {\n                        cropsArray.map(crops => (\n                            <li\n                                className=\"coinscrops__text\"\n                                key={crops.key}\n                            >\n                                <span>{crops.symbol}</span>\n                                <span>{crops.amount.toFixed(2)}</span>\n                            </li>\n                        ))\n                    }\n                </ul>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const SaveAsJson = ({ text, filename, jsonData }) => {\n    return (\n        <a\n            className='save_as_json__button'\n            href={`data:text/json;charset=utf-8,${encodeURIComponent(\n                JSON.stringify(jsonData)\n            )}`}\n            download={`${filename}.json`}\n        >\n            {text}\n        </a>\n    )\n}\n","import React, { useContext, useState } from 'react'\n// import { v4 as uuidv4 } from 'uuid'\n// import { getDefaultTodayDate } from '../functions/handleDate'\nimport { SaveAsJson } from './SaveAsJson'\n\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const AddBalance = () => {\n    const { addBalance, dailyBalance } = useContext(GlobalContext)\n\n    const [symbol, setSymbol] = useState('')\n    const [amount, setAmount] = useState(0)\n    const [description, setDescription] = useState('')\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        addBalance({\n            // id: uuidv4(),\n            // datetime: getDefaultTodayDate(),\n            symbol,\n            amount: +amount, // '+' sign to enter a number\n            description\n        })\n    }\n\n\n    return (\n        <div className='add_balance'>\n            <h3>Add today's balance</h3>\n            <form onSubmit={handleSubmit} className=\"add_balance__form\">\n                <div className=\"add_balance__form__control\">\n                    <label\n                        className='add_balance__form__label'\n                        htmlFor=\"symbol\"\n                    >\n                        Symbol\n                    </label>\n                    <input\n                        className='add_balance__form__input'\n                        value={symbol}\n                        onChange={(e) => setSymbol(e.target.value)}\n                        type=\"text\"\n                        name=\"symbol\"\n                        placeholder='coin symbol'\n                    />\n                </div>\n                <div className=\"add_balance__form__control\">\n                    <label\n                        className='add_balance__form__label'\n                        htmlFor=\"amount\"\n                    >\n                        Amount\n                    </label>\n                    <input\n                        className='add_balance__form__input'\n                        value={amount}\n                        onChange={e => setAmount(e.target.value)}\n                        type=\"number\"\n                        step='any'\n                        name=\"amount\"\n                        placeholder='amount'\n                    />\n                </div>\n                <div className=\"add_balance__form__control\">\n                    <label\n                        className='add_balance__form__label'\n                        htmlFor=\"description\"\n                    >\n                        Description\n                    </label>\n                    <input\n                        className='add_balance__form__input'\n                        value={description}\n                        onChange={(e) => setDescription(e.target.value)}\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder='description'\n                    />\n                </div>\n                <button className=\"add_balance__button\">Add balance</button>\n            </form>\n            <SaveAsJson text='Save balance to JSON file' filename='dailyBalance' jsonData={dailyBalance} />\n        </div>\n    )\n}\n","import React, { useContext, useState } from 'react'\n// import { v4 as uuidv4 } from 'uuid'\n// import { getDefaultTodayDate } from '../functions/handleDate'\nimport { SaveAsJson } from './SaveAsJson'\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const AddCrops = () => {\n    const { addCrops, cropsHarvested } = useContext(GlobalContext)\n\n    const [symbol, setSymbol] = useState('')\n    const [amount, setAmount] = useState(0)\n    const [description, setDescription] = useState('')\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        addCrops({\n            // id: uuidv4(),\n            // datetime: getDefaultTodayDate(),\n            symbol,\n            amount: +amount, // '+' sign to enter a number\n            description\n        })\n    }\n\n\n    return (\n        <div className='add_balance'>\n            <h3>Add today's crops</h3>\n            <form onSubmit={handleSubmit} className=\"add_balance__form\">\n                <div className=\"add_balance__form__control\">\n                    <label\n                        className='add_balance__form__label'\n                        htmlFor=\"symbol\"\n                    >\n                        Symbol\n                    </label>\n                    <input\n                        className='add_balance__form__input'\n                        value={symbol}\n                        onChange={(e) => setSymbol(e.target.value)}\n                        type=\"text\"\n                        name=\"symbol\"\n                        placeholder='coin symbol'\n                    />\n                </div>\n                <div className=\"add_balance__form__control\">\n                    <label\n                        className='add_balance__form__label'\n                        htmlFor=\"amount\"\n                    >\n                        Amount\n                    </label>\n                    <input\n                        className='add_balance__form__input'\n                        value={amount}\n                        onChange={e => setAmount(e.target.value)}\n                        type=\"number\"\n                        step='any'\n                        name=\"amount\"\n                        placeholder='amount'\n                    />\n                </div>\n                <div className=\"add_balance__form__control\">\n                    <label\n                        className='add_balance__form__label'\n                        htmlFor=\"description\"\n                    >\n                        Description\n                    </label>\n                    <input\n                        className='add_balance__form__input'\n                        value={description}\n                        onChange={(e) => setDescription(e.target.value)}\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder='description'\n                    />\n                </div>\n                <button className=\"add_balance__button\">Add crops</button>\n            </form>\n            <SaveAsJson text='Save crops to JSON file' filename='cropsHarvested' jsonData={cropsHarvested} />\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport { handleDate } from '../functions/handleDate'\n\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const EachBalance = ({ balance }) => {\n    const { deleteBalance } = useContext(GlobalContext)\n    return (\n        <li className=\"balance_item__item\">\n            <span className=\"balance_item__item__span\">{handleDate(balance.createdAt)}</span>\n            <span className=\"balance_item__item__span balance_item__item__span__center\">{balance.symbol}</span>\n            <span className=\"balance_item__item__span balance_item__item__span__last\">{balance.amount.toFixed(2)}</span>\n            <button\n                className=\"balance_item__delete_btn\"\n                onClick={() => deleteBalance(balance._id)}\n            >\n                x\n            </button>\n        </li>\n    )\n}\n","import React, { useContext, useEffect } from 'react'\nimport { EachBalance } from './EachBalance'\n\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const BalancesList = () => {\n    const { dailyBalance, getBalance, balanceLoading } = useContext(GlobalContext)\n\n    useEffect(() => {\n        getBalance()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (balanceLoading) (\n        <h1>Loading...</h1>\n    )\n\n    return (\n        <div className='balances_list'>\n            <h3 className=\"balances_list__title\">\n                Latest entries\n            </h3>\n            <ul className=\"balances_list__list\">\n                {\n                    dailyBalance.map(balance => (\n                        <EachBalance key={balance._id} balance={balance} />\n                    ))\n                }\n            </ul>\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport { handleDate } from '../functions/handleDate'\n\nimport { GlobalContext } from '../context/GlobalState'\n\nexport const EachCrops = ({ crops }) => {\n    const { deleteCrops } = useContext(GlobalContext)\n\n    return (\n        <li className=\"balance_item__item\">\n            <span className=\"balance_item__item__span\">{handleDate(crops.createdAt)}</span>\n            <span className=\"balance_item__item__span balance_item__item__span__center\">{crops.symbol}</span>\n            <span className=\"balance_item__item__span balance_item__item__span__last\">{crops.amount.toFixed(2)}</span>\n            <button\n                className=\"balance_item__delete_btn\"\n                onClick={() => deleteCrops(crops._id)}\n            >\n                x\n            </button>\n        </li>\n    )\n}\n","import React, { useContext, useEffect } from 'react'\n\nimport { GlobalContext } from '../context/GlobalState'\nimport { EachCrops } from './EachCrops'\n\nexport const CropsList = () => {\n    const { cropsHarvested, getCrops, cropsLoading } = useContext(GlobalContext)\n\n    useEffect(() => {\n        getCrops()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (cropsLoading) {\n        return <h1>Loading...</h1>\n    }\n\n    return (\n        <div className='balances_list'>\n            <h3 className=\"balances_list__title\">\n                Latest crops\n            </h3>\n            <ul className=\"balances_list__list\">\n                {\n                    cropsHarvested.map(crops => (\n                        <EachCrops key={crops._id} crops={crops} />\n                    ))\n                }\n            </ul>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Balance } from './Balance'\nimport { CoinsCrops } from './CoinsCrops'\nimport { AddBalance } from './AddBalance'\nimport { AddCrops } from './AddCrops'\nimport { BalancesList } from './BalancesList'\nimport { CropsList } from './CropsList'\n\nimport { GlobalProvider } from '../context/GlobalState'\n\n\nexport const Dashboard = () => {\n    return (\n        <GlobalProvider>\n            <Balance />\n            <CoinsCrops />\n            <AddBalance />\n            <AddCrops />\n            <BalancesList />\n            <CropsList />\n        </GlobalProvider>\n    )\n}\n","import { Login } from './components/Login'\nimport { Header } from './components/Header'\nimport { Dashboard } from './components/Dashboard'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport useToken from './components/useToken'\n\nimport './App.css';\n\nfunction App() {\n  const { token, setToken } = useToken()\n\n  if (!token) {\n    return <Login setToken={setToken} />\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <BrowserRouter>\n        <Switch>\n          <Route path='/'>\n            <Dashboard />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nexport default function useToken() {\n    const getToken = () => {\n        const tokenString = localStorage.getItem('crypto-observer-token')\n        const userToken = JSON.parse(tokenString)\n        return userToken?.token\n    }\n\n    const [token, setToken] = useState(getToken())\n\n    const saveToken = (userToken) => {\n        localStorage.setItem('crypto-observer-token', JSON.stringify(userToken))\n        setToken(userToken.token)\n    }\n\n    return {\n        setToken: saveToken,\n        token\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}